# interpreter for shell commands (needs to be POSIX compatible)
# Basic Settings
set shell pwsh
set preview true
set previewer "C:\\Users\\eqana\\AppData\\Local\\lf\\lf_scripts\\preview.bat"
set hidden true
set drawbox true
set icons true
set ignorecase true
# set ifs "\n"
set filesep " "



# leave some space at the top and the bottom of the screen
set scrolloff 10
set ifs "\n"

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map e &start nvim %f%

cmd term &start cmdcon 

cmd q quit

cmd open ${{    
    test -L $f && f=$(readlink -f $f)    
    case "$(file --mime-type "$f" -b)" in    
        text/*) nvim $fx;;    
        audio/*) mpv --audio-display=no $f ;;    
        *) for f in $fx; do start $f > /dev/null 2> /dev/null & done;;    
    esac    
}}


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


# reload config file using f5
map <f-5> push :source<space>C:/Users/eqana/AppData/Local/lf/lfrc<enter>


cmd remove push $python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/remove_files.py<space>%fx%<enter>

# use a and A to create files and directories
cmd createfile %sh -c 'touch $0'
cmd createdir %sh -c 'mkdir $0'
map a push :createfile<space>
map A push :createdir<space>

# open explorer in current directory
map S push &start.<enter>
map T push &wt<enter>

# copy file path
map Y %echo %fx% | clip

# open file in nvim
map V &nvim %f%

# backup and restore
cmd backup push !python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/backup_files.py<space>%fx%<enter>
cmd backup_restore push !python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/debackup_files.py<space>%fx%<enter>

# must have at least a file in it
cmd bookmark %sh -c 'python C:/Users/eqana/AppData/Local/lf/lf_scripts/bookmark.py %f% $0'
cmd goto_bookmark push $python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/goto_bookmark.py<space>%id%<enter>
map B push :bookmark<space>
map b push :goto_bookmark<enter>

map F push :filter<enter>
map gF push :setfilter<enter>

# archive management
cmd zip %sh -c '7z a $0 %fx%'
cmd extract_here %sh -c '7z e %f%'
cmd extract_to %sh -c '7z e %f% -o$0'
cmd extract_auto %sh -c '7z e %f% -o%f%_extracted'
cmd extract_auto_and_remove %sh -c '7z e %f% -o%f%_extracted && rm %f%'

map x push :extract_auto<enter>
map X push :extract_auto_and_remove<enter>

# drag and drop
cmd drag push &python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/drag.py<space>multi<space>%fx%<enter>
cmd dragonce push &python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/drag.py<space>once<space>%fx%<enter>
map D push :dragonce<enter>

# use c-f to fuzzy search
cmd fzf_jump push $python<space>C:/Users/eqana/AppData/Local/lf/lf_scripts/fzfpy.py<space>%id%<enter>
map <c-f> :fzf_jump

# quick preview
# map P $C:\Users\Lion\AppData\Local\Programs\QuickLook\QuickLook.exe %f%

# custom file preview
set previewer "C:\\Users\\eqana\\AppData/Local\\lf\\lf_scripts\\preview.bat"

# cmd send_to_mobile %sh -c 'scp -P 2222 hex@192.168.1.151: %fx%'
cmd send_to_mobile push $scp<space>-P<space>2222<space>%fx%<space>hex@192.168.1.151:<enter>
cmd send_to_tablet push $scp<space>-P<space>2222<space>%fx%<space>hex@192.168.1.150:<enter>
map st push :send_to_tablet<enter>
map sm push :send_to_mobile<enter>
